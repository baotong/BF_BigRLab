/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PyTest_TYPES_H
#define PyTest_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "AlgCommon_types.h"


namespace PyTest {

class Result;

typedef struct _Result__isset {
  _Result__isset() : id(false), word(false) {}
  bool id :1;
  bool word :1;
} _Result__isset;

class Result {
 public:

  Result(const Result&);
  Result(Result&&);
  Result& operator=(const Result&);
  Result& operator=(Result&&);
  Result() : id(0), word() {
  }

  virtual ~Result() throw();
  int32_t id;
  std::string word;

  _Result__isset __isset;

  void __set_id(const int32_t val);

  void __set_word(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Result &a, Result &b);

inline std::ostream& operator<<(std::ostream& out, const Result& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#include "PyTest_types.tcc"

#endif
