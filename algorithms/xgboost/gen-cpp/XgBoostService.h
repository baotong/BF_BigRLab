/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef XgBoostService_H
#define XgBoostService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "xgboost_svr_types.h"

namespace XgBoostSvr {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class XgBoostServiceIf {
 public:
  virtual ~XgBoostServiceIf() {}
  virtual void predict(std::vector<double> & _return, const std::string& input, const bool leaf) = 0;
  virtual void predict_GBDT(std::vector<double> & _return, const std::string& input, const bool simple) = 0;
  virtual void handleRequest(std::string& _return, const std::string& request) = 0;
};

class XgBoostServiceIfFactory {
 public:
  typedef XgBoostServiceIf Handler;

  virtual ~XgBoostServiceIfFactory() {}

  virtual XgBoostServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(XgBoostServiceIf* /* handler */) = 0;
};

class XgBoostServiceIfSingletonFactory : virtual public XgBoostServiceIfFactory {
 public:
  XgBoostServiceIfSingletonFactory(const boost::shared_ptr<XgBoostServiceIf>& iface) : iface_(iface) {}
  virtual ~XgBoostServiceIfSingletonFactory() {}

  virtual XgBoostServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(XgBoostServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<XgBoostServiceIf> iface_;
};

class XgBoostServiceNull : virtual public XgBoostServiceIf {
 public:
  virtual ~XgBoostServiceNull() {}
  void predict(std::vector<double> & /* _return */, const std::string& /* input */, const bool /* leaf */) {
    return;
  }
  void predict_GBDT(std::vector<double> & /* _return */, const std::string& /* input */, const bool /* simple */) {
    return;
  }
  void handleRequest(std::string& /* _return */, const std::string& /* request */) {
    return;
  }
};

typedef struct _XgBoostService_predict_args__isset {
  _XgBoostService_predict_args__isset() : input(false), leaf(false) {}
  bool input :1;
  bool leaf :1;
} _XgBoostService_predict_args__isset;

class XgBoostService_predict_args {
 public:

  XgBoostService_predict_args(const XgBoostService_predict_args&);
  XgBoostService_predict_args(XgBoostService_predict_args&&);
  XgBoostService_predict_args& operator=(const XgBoostService_predict_args&);
  XgBoostService_predict_args& operator=(XgBoostService_predict_args&&);
  XgBoostService_predict_args() : input(), leaf(0) {
  }

  virtual ~XgBoostService_predict_args() throw();
  std::string input;
  bool leaf;

  _XgBoostService_predict_args__isset __isset;

  void __set_input(const std::string& val);

  void __set_leaf(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class XgBoostService_predict_pargs {
 public:


  virtual ~XgBoostService_predict_pargs() throw();
  const std::string* input;
  const bool* leaf;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _XgBoostService_predict_result__isset {
  _XgBoostService_predict_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _XgBoostService_predict_result__isset;

class XgBoostService_predict_result {
 public:

  XgBoostService_predict_result(const XgBoostService_predict_result&);
  XgBoostService_predict_result(XgBoostService_predict_result&&);
  XgBoostService_predict_result& operator=(const XgBoostService_predict_result&);
  XgBoostService_predict_result& operator=(XgBoostService_predict_result&&);
  XgBoostService_predict_result() {
  }

  virtual ~XgBoostService_predict_result() throw();
  std::vector<double>  success;
   ::AlgCommon::InvalidRequest err;

  _XgBoostService_predict_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  void __set_err(const  ::AlgCommon::InvalidRequest& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _XgBoostService_predict_presult__isset {
  _XgBoostService_predict_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _XgBoostService_predict_presult__isset;

class XgBoostService_predict_presult {
 public:


  virtual ~XgBoostService_predict_presult() throw();
  std::vector<double> * success;
   ::AlgCommon::InvalidRequest err;

  _XgBoostService_predict_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _XgBoostService_predict_GBDT_args__isset {
  _XgBoostService_predict_GBDT_args__isset() : input(false), simple(false) {}
  bool input :1;
  bool simple :1;
} _XgBoostService_predict_GBDT_args__isset;

class XgBoostService_predict_GBDT_args {
 public:

  XgBoostService_predict_GBDT_args(const XgBoostService_predict_GBDT_args&);
  XgBoostService_predict_GBDT_args(XgBoostService_predict_GBDT_args&&);
  XgBoostService_predict_GBDT_args& operator=(const XgBoostService_predict_GBDT_args&);
  XgBoostService_predict_GBDT_args& operator=(XgBoostService_predict_GBDT_args&&);
  XgBoostService_predict_GBDT_args() : input(), simple(0) {
  }

  virtual ~XgBoostService_predict_GBDT_args() throw();
  std::string input;
  bool simple;

  _XgBoostService_predict_GBDT_args__isset __isset;

  void __set_input(const std::string& val);

  void __set_simple(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class XgBoostService_predict_GBDT_pargs {
 public:


  virtual ~XgBoostService_predict_GBDT_pargs() throw();
  const std::string* input;
  const bool* simple;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _XgBoostService_predict_GBDT_result__isset {
  _XgBoostService_predict_GBDT_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _XgBoostService_predict_GBDT_result__isset;

class XgBoostService_predict_GBDT_result {
 public:

  XgBoostService_predict_GBDT_result(const XgBoostService_predict_GBDT_result&);
  XgBoostService_predict_GBDT_result(XgBoostService_predict_GBDT_result&&);
  XgBoostService_predict_GBDT_result& operator=(const XgBoostService_predict_GBDT_result&);
  XgBoostService_predict_GBDT_result& operator=(XgBoostService_predict_GBDT_result&&);
  XgBoostService_predict_GBDT_result() {
  }

  virtual ~XgBoostService_predict_GBDT_result() throw();
  std::vector<double>  success;
   ::AlgCommon::InvalidRequest err;

  _XgBoostService_predict_GBDT_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  void __set_err(const  ::AlgCommon::InvalidRequest& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _XgBoostService_predict_GBDT_presult__isset {
  _XgBoostService_predict_GBDT_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _XgBoostService_predict_GBDT_presult__isset;

class XgBoostService_predict_GBDT_presult {
 public:


  virtual ~XgBoostService_predict_GBDT_presult() throw();
  std::vector<double> * success;
   ::AlgCommon::InvalidRequest err;

  _XgBoostService_predict_GBDT_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _XgBoostService_handleRequest_args__isset {
  _XgBoostService_handleRequest_args__isset() : request(false) {}
  bool request :1;
} _XgBoostService_handleRequest_args__isset;

class XgBoostService_handleRequest_args {
 public:

  XgBoostService_handleRequest_args(const XgBoostService_handleRequest_args&);
  XgBoostService_handleRequest_args(XgBoostService_handleRequest_args&&);
  XgBoostService_handleRequest_args& operator=(const XgBoostService_handleRequest_args&);
  XgBoostService_handleRequest_args& operator=(XgBoostService_handleRequest_args&&);
  XgBoostService_handleRequest_args() : request() {
  }

  virtual ~XgBoostService_handleRequest_args() throw();
  std::string request;

  _XgBoostService_handleRequest_args__isset __isset;

  void __set_request(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class XgBoostService_handleRequest_pargs {
 public:


  virtual ~XgBoostService_handleRequest_pargs() throw();
  const std::string* request;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _XgBoostService_handleRequest_result__isset {
  _XgBoostService_handleRequest_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _XgBoostService_handleRequest_result__isset;

class XgBoostService_handleRequest_result {
 public:

  XgBoostService_handleRequest_result(const XgBoostService_handleRequest_result&);
  XgBoostService_handleRequest_result(XgBoostService_handleRequest_result&&);
  XgBoostService_handleRequest_result& operator=(const XgBoostService_handleRequest_result&);
  XgBoostService_handleRequest_result& operator=(XgBoostService_handleRequest_result&&);
  XgBoostService_handleRequest_result() : success() {
  }

  virtual ~XgBoostService_handleRequest_result() throw();
  std::string success;
   ::AlgCommon::InvalidRequest err;

  _XgBoostService_handleRequest_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_err(const  ::AlgCommon::InvalidRequest& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _XgBoostService_handleRequest_presult__isset {
  _XgBoostService_handleRequest_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _XgBoostService_handleRequest_presult__isset;

class XgBoostService_handleRequest_presult {
 public:


  virtual ~XgBoostService_handleRequest_presult() throw();
  std::string* success;
   ::AlgCommon::InvalidRequest err;

  _XgBoostService_handleRequest_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class XgBoostServiceClientT : virtual public XgBoostServiceIf {
 public:
  XgBoostServiceClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  XgBoostServiceClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void predict(std::vector<double> & _return, const std::string& input, const bool leaf);
  void send_predict(const std::string& input, const bool leaf);
  void recv_predict(std::vector<double> & _return);
  void predict_GBDT(std::vector<double> & _return, const std::string& input, const bool simple);
  void send_predict_GBDT(const std::string& input, const bool simple);
  void recv_predict_GBDT(std::vector<double> & _return);
  void handleRequest(std::string& _return, const std::string& request);
  void send_handleRequest(const std::string& request);
  void recv_handleRequest(std::string& _return);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef XgBoostServiceClientT< ::apache::thrift::protocol::TProtocol> XgBoostServiceClient;

template <class Protocol_>
class XgBoostServiceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  boost::shared_ptr<XgBoostServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (XgBoostServiceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (XgBoostServiceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_predict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_predict(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_predict_GBDT(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_predict_GBDT(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_handleRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_handleRequest(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  XgBoostServiceProcessorT(boost::shared_ptr<XgBoostServiceIf> iface) :
    iface_(iface) {
    processMap_["predict"] = ProcessFunctions(
      &XgBoostServiceProcessorT::process_predict,
      &XgBoostServiceProcessorT::process_predict);
    processMap_["predict_GBDT"] = ProcessFunctions(
      &XgBoostServiceProcessorT::process_predict_GBDT,
      &XgBoostServiceProcessorT::process_predict_GBDT);
    processMap_["handleRequest"] = ProcessFunctions(
      &XgBoostServiceProcessorT::process_handleRequest,
      &XgBoostServiceProcessorT::process_handleRequest);
  }

  virtual ~XgBoostServiceProcessorT() {}
};

typedef XgBoostServiceProcessorT< ::apache::thrift::protocol::TDummyProtocol > XgBoostServiceProcessor;

template <class Protocol_>
class XgBoostServiceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  XgBoostServiceProcessorFactoryT(const ::boost::shared_ptr< XgBoostServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< XgBoostServiceIfFactory > handlerFactory_;
};

typedef XgBoostServiceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > XgBoostServiceProcessorFactory;

class XgBoostServiceMultiface : virtual public XgBoostServiceIf {
 public:
  XgBoostServiceMultiface(std::vector<boost::shared_ptr<XgBoostServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~XgBoostServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<XgBoostServiceIf> > ifaces_;
  XgBoostServiceMultiface() {}
  void add(boost::shared_ptr<XgBoostServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void predict(std::vector<double> & _return, const std::string& input, const bool leaf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->predict(_return, input, leaf);
    }
    ifaces_[i]->predict(_return, input, leaf);
    return;
  }

  void predict_GBDT(std::vector<double> & _return, const std::string& input, const bool simple) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->predict_GBDT(_return, input, simple);
    }
    ifaces_[i]->predict_GBDT(_return, input, simple);
    return;
  }

  void handleRequest(std::string& _return, const std::string& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->handleRequest(_return, request);
    }
    ifaces_[i]->handleRequest(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class XgBoostServiceConcurrentClientT : virtual public XgBoostServiceIf {
 public:
  XgBoostServiceConcurrentClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  XgBoostServiceConcurrentClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void predict(std::vector<double> & _return, const std::string& input, const bool leaf);
  int32_t send_predict(const std::string& input, const bool leaf);
  void recv_predict(std::vector<double> & _return, const int32_t seqid);
  void predict_GBDT(std::vector<double> & _return, const std::string& input, const bool simple);
  int32_t send_predict_GBDT(const std::string& input, const bool simple);
  void recv_predict_GBDT(std::vector<double> & _return, const int32_t seqid);
  void handleRequest(std::string& _return, const std::string& request);
  int32_t send_handleRequest(const std::string& request);
  void recv_handleRequest(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef XgBoostServiceConcurrentClientT< ::apache::thrift::protocol::TProtocol> XgBoostServiceConcurrentClient;

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#include "XgBoostService.tcc"
#include "xgboost_svr_types.tcc"

#endif
