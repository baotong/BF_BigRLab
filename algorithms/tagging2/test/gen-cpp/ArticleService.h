/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ArticleService_H
#define ArticleService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "article_types.h"

namespace Article {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ArticleServiceIf {
 public:
  virtual ~ArticleServiceIf() {}
  virtual void setFilter(const std::string& filter) = 0;
  virtual void tagging(std::vector<TagResult> & _return, const std::string& text, const int32_t method, const int32_t k1, const int32_t k2, const int32_t searchK, const int32_t topk) = 0;
  virtual void handleRequest(std::string& _return, const std::string& request) = 0;
};

class ArticleServiceIfFactory {
 public:
  typedef ArticleServiceIf Handler;

  virtual ~ArticleServiceIfFactory() {}

  virtual ArticleServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ArticleServiceIf* /* handler */) = 0;
};

class ArticleServiceIfSingletonFactory : virtual public ArticleServiceIfFactory {
 public:
  ArticleServiceIfSingletonFactory(const boost::shared_ptr<ArticleServiceIf>& iface) : iface_(iface) {}
  virtual ~ArticleServiceIfSingletonFactory() {}

  virtual ArticleServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ArticleServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ArticleServiceIf> iface_;
};

class ArticleServiceNull : virtual public ArticleServiceIf {
 public:
  virtual ~ArticleServiceNull() {}
  void setFilter(const std::string& /* filter */) {
    return;
  }
  void tagging(std::vector<TagResult> & /* _return */, const std::string& /* text */, const int32_t /* method */, const int32_t /* k1 */, const int32_t /* k2 */, const int32_t /* searchK */, const int32_t /* topk */) {
    return;
  }
  void handleRequest(std::string& /* _return */, const std::string& /* request */) {
    return;
  }
};

typedef struct _ArticleService_setFilter_args__isset {
  _ArticleService_setFilter_args__isset() : filter(false) {}
  bool filter :1;
} _ArticleService_setFilter_args__isset;

class ArticleService_setFilter_args {
 public:

  ArticleService_setFilter_args(const ArticleService_setFilter_args&);
  ArticleService_setFilter_args(ArticleService_setFilter_args&&);
  ArticleService_setFilter_args& operator=(const ArticleService_setFilter_args&);
  ArticleService_setFilter_args& operator=(ArticleService_setFilter_args&&);
  ArticleService_setFilter_args() : filter() {
  }

  virtual ~ArticleService_setFilter_args() throw();
  std::string filter;

  _ArticleService_setFilter_args__isset __isset;

  void __set_filter(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ArticleService_setFilter_pargs {
 public:


  virtual ~ArticleService_setFilter_pargs() throw();
  const std::string* filter;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ArticleService_setFilter_result {
 public:

  ArticleService_setFilter_result(const ArticleService_setFilter_result&);
  ArticleService_setFilter_result(ArticleService_setFilter_result&&);
  ArticleService_setFilter_result& operator=(const ArticleService_setFilter_result&);
  ArticleService_setFilter_result& operator=(ArticleService_setFilter_result&&);
  ArticleService_setFilter_result() {
  }

  virtual ~ArticleService_setFilter_result() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ArticleService_setFilter_presult {
 public:


  virtual ~ArticleService_setFilter_presult() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _ArticleService_tagging_args__isset {
  _ArticleService_tagging_args__isset() : text(false), method(false), k1(false), k2(false), searchK(false), topk(false) {}
  bool text :1;
  bool method :1;
  bool k1 :1;
  bool k2 :1;
  bool searchK :1;
  bool topk :1;
} _ArticleService_tagging_args__isset;

class ArticleService_tagging_args {
 public:

  ArticleService_tagging_args(const ArticleService_tagging_args&);
  ArticleService_tagging_args(ArticleService_tagging_args&&);
  ArticleService_tagging_args& operator=(const ArticleService_tagging_args&);
  ArticleService_tagging_args& operator=(ArticleService_tagging_args&&);
  ArticleService_tagging_args() : text(), method(0), k1(0), k2(0), searchK(0), topk(0) {
  }

  virtual ~ArticleService_tagging_args() throw();
  std::string text;
  int32_t method;
  int32_t k1;
  int32_t k2;
  int32_t searchK;
  int32_t topk;

  _ArticleService_tagging_args__isset __isset;

  void __set_text(const std::string& val);

  void __set_method(const int32_t val);

  void __set_k1(const int32_t val);

  void __set_k2(const int32_t val);

  void __set_searchK(const int32_t val);

  void __set_topk(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ArticleService_tagging_pargs {
 public:


  virtual ~ArticleService_tagging_pargs() throw();
  const std::string* text;
  const int32_t* method;
  const int32_t* k1;
  const int32_t* k2;
  const int32_t* searchK;
  const int32_t* topk;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ArticleService_tagging_result__isset {
  _ArticleService_tagging_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _ArticleService_tagging_result__isset;

class ArticleService_tagging_result {
 public:

  ArticleService_tagging_result(const ArticleService_tagging_result&);
  ArticleService_tagging_result(ArticleService_tagging_result&&);
  ArticleService_tagging_result& operator=(const ArticleService_tagging_result&);
  ArticleService_tagging_result& operator=(ArticleService_tagging_result&&);
  ArticleService_tagging_result() {
  }

  virtual ~ArticleService_tagging_result() throw();
  std::vector<TagResult>  success;
   ::AlgCommon::InvalidRequest err;

  _ArticleService_tagging_result__isset __isset;

  void __set_success(const std::vector<TagResult> & val);

  void __set_err(const  ::AlgCommon::InvalidRequest& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ArticleService_tagging_presult__isset {
  _ArticleService_tagging_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _ArticleService_tagging_presult__isset;

class ArticleService_tagging_presult {
 public:


  virtual ~ArticleService_tagging_presult() throw();
  std::vector<TagResult> * success;
   ::AlgCommon::InvalidRequest err;

  _ArticleService_tagging_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _ArticleService_handleRequest_args__isset {
  _ArticleService_handleRequest_args__isset() : request(false) {}
  bool request :1;
} _ArticleService_handleRequest_args__isset;

class ArticleService_handleRequest_args {
 public:

  ArticleService_handleRequest_args(const ArticleService_handleRequest_args&);
  ArticleService_handleRequest_args(ArticleService_handleRequest_args&&);
  ArticleService_handleRequest_args& operator=(const ArticleService_handleRequest_args&);
  ArticleService_handleRequest_args& operator=(ArticleService_handleRequest_args&&);
  ArticleService_handleRequest_args() : request() {
  }

  virtual ~ArticleService_handleRequest_args() throw();
  std::string request;

  _ArticleService_handleRequest_args__isset __isset;

  void __set_request(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ArticleService_handleRequest_pargs {
 public:


  virtual ~ArticleService_handleRequest_pargs() throw();
  const std::string* request;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ArticleService_handleRequest_result__isset {
  _ArticleService_handleRequest_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _ArticleService_handleRequest_result__isset;

class ArticleService_handleRequest_result {
 public:

  ArticleService_handleRequest_result(const ArticleService_handleRequest_result&);
  ArticleService_handleRequest_result(ArticleService_handleRequest_result&&);
  ArticleService_handleRequest_result& operator=(const ArticleService_handleRequest_result&);
  ArticleService_handleRequest_result& operator=(ArticleService_handleRequest_result&&);
  ArticleService_handleRequest_result() : success() {
  }

  virtual ~ArticleService_handleRequest_result() throw();
  std::string success;
   ::AlgCommon::InvalidRequest err;

  _ArticleService_handleRequest_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_err(const  ::AlgCommon::InvalidRequest& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ArticleService_handleRequest_presult__isset {
  _ArticleService_handleRequest_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _ArticleService_handleRequest_presult__isset;

class ArticleService_handleRequest_presult {
 public:


  virtual ~ArticleService_handleRequest_presult() throw();
  std::string* success;
   ::AlgCommon::InvalidRequest err;

  _ArticleService_handleRequest_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class ArticleServiceClientT : virtual public ArticleServiceIf {
 public:
  ArticleServiceClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  ArticleServiceClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void setFilter(const std::string& filter);
  void send_setFilter(const std::string& filter);
  void recv_setFilter();
  void tagging(std::vector<TagResult> & _return, const std::string& text, const int32_t method, const int32_t k1, const int32_t k2, const int32_t searchK, const int32_t topk);
  void send_tagging(const std::string& text, const int32_t method, const int32_t k1, const int32_t k2, const int32_t searchK, const int32_t topk);
  void recv_tagging(std::vector<TagResult> & _return);
  void handleRequest(std::string& _return, const std::string& request);
  void send_handleRequest(const std::string& request);
  void recv_handleRequest(std::string& _return);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef ArticleServiceClientT< ::apache::thrift::protocol::TProtocol> ArticleServiceClient;

template <class Protocol_>
class ArticleServiceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  boost::shared_ptr<ArticleServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ArticleServiceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (ArticleServiceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_setFilter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setFilter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_tagging(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tagging(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_handleRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_handleRequest(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  ArticleServiceProcessorT(boost::shared_ptr<ArticleServiceIf> iface) :
    iface_(iface) {
    processMap_["setFilter"] = ProcessFunctions(
      &ArticleServiceProcessorT::process_setFilter,
      &ArticleServiceProcessorT::process_setFilter);
    processMap_["tagging"] = ProcessFunctions(
      &ArticleServiceProcessorT::process_tagging,
      &ArticleServiceProcessorT::process_tagging);
    processMap_["handleRequest"] = ProcessFunctions(
      &ArticleServiceProcessorT::process_handleRequest,
      &ArticleServiceProcessorT::process_handleRequest);
  }

  virtual ~ArticleServiceProcessorT() {}
};

typedef ArticleServiceProcessorT< ::apache::thrift::protocol::TDummyProtocol > ArticleServiceProcessor;

template <class Protocol_>
class ArticleServiceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  ArticleServiceProcessorFactoryT(const ::boost::shared_ptr< ArticleServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ArticleServiceIfFactory > handlerFactory_;
};

typedef ArticleServiceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > ArticleServiceProcessorFactory;

class ArticleServiceMultiface : virtual public ArticleServiceIf {
 public:
  ArticleServiceMultiface(std::vector<boost::shared_ptr<ArticleServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ArticleServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ArticleServiceIf> > ifaces_;
  ArticleServiceMultiface() {}
  void add(boost::shared_ptr<ArticleServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setFilter(const std::string& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setFilter(filter);
    }
    ifaces_[i]->setFilter(filter);
  }

  void tagging(std::vector<TagResult> & _return, const std::string& text, const int32_t method, const int32_t k1, const int32_t k2, const int32_t searchK, const int32_t topk) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tagging(_return, text, method, k1, k2, searchK, topk);
    }
    ifaces_[i]->tagging(_return, text, method, k1, k2, searchK, topk);
    return;
  }

  void handleRequest(std::string& _return, const std::string& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->handleRequest(_return, request);
    }
    ifaces_[i]->handleRequest(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class ArticleServiceConcurrentClientT : virtual public ArticleServiceIf {
 public:
  ArticleServiceConcurrentClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  ArticleServiceConcurrentClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void setFilter(const std::string& filter);
  int32_t send_setFilter(const std::string& filter);
  void recv_setFilter(const int32_t seqid);
  void tagging(std::vector<TagResult> & _return, const std::string& text, const int32_t method, const int32_t k1, const int32_t k2, const int32_t searchK, const int32_t topk);
  int32_t send_tagging(const std::string& text, const int32_t method, const int32_t k1, const int32_t k2, const int32_t searchK, const int32_t topk);
  void recv_tagging(std::vector<TagResult> & _return, const int32_t seqid);
  void handleRequest(std::string& _return, const std::string& request);
  int32_t send_handleRequest(const std::string& request);
  void recv_handleRequest(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef ArticleServiceConcurrentClientT< ::apache::thrift::protocol::TProtocol> ArticleServiceConcurrentClient;

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#include "ArticleService.tcc"
#include "article_types.tcc"

#endif
