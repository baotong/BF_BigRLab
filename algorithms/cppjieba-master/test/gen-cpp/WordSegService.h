/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WordSegService_H
#define WordSegService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "wordseg_types.h"

namespace WordSeg {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class WordSegServiceIf {
 public:
  virtual ~WordSegServiceIf() {}
  virtual void setFilter(const std::string& filter) = 0;
  virtual void tag(std::vector<ResultItem> & _return, const std::string& sentence) = 0;
  virtual void tagOnlyItem(std::vector<std::string> & _return, const std::string& sentence) = 0;
  virtual void handleRequest(std::string& _return, const std::string& request) = 0;
};

class WordSegServiceIfFactory {
 public:
  typedef WordSegServiceIf Handler;

  virtual ~WordSegServiceIfFactory() {}

  virtual WordSegServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WordSegServiceIf* /* handler */) = 0;
};

class WordSegServiceIfSingletonFactory : virtual public WordSegServiceIfFactory {
 public:
  WordSegServiceIfSingletonFactory(const boost::shared_ptr<WordSegServiceIf>& iface) : iface_(iface) {}
  virtual ~WordSegServiceIfSingletonFactory() {}

  virtual WordSegServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WordSegServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<WordSegServiceIf> iface_;
};

class WordSegServiceNull : virtual public WordSegServiceIf {
 public:
  virtual ~WordSegServiceNull() {}
  void setFilter(const std::string& /* filter */) {
    return;
  }
  void tag(std::vector<ResultItem> & /* _return */, const std::string& /* sentence */) {
    return;
  }
  void tagOnlyItem(std::vector<std::string> & /* _return */, const std::string& /* sentence */) {
    return;
  }
  void handleRequest(std::string& /* _return */, const std::string& /* request */) {
    return;
  }
};

typedef struct _WordSegService_setFilter_args__isset {
  _WordSegService_setFilter_args__isset() : filter(false) {}
  bool filter :1;
} _WordSegService_setFilter_args__isset;

class WordSegService_setFilter_args {
 public:

  WordSegService_setFilter_args(const WordSegService_setFilter_args&);
  WordSegService_setFilter_args(WordSegService_setFilter_args&&);
  WordSegService_setFilter_args& operator=(const WordSegService_setFilter_args&);
  WordSegService_setFilter_args& operator=(WordSegService_setFilter_args&&);
  WordSegService_setFilter_args() : filter() {
  }

  virtual ~WordSegService_setFilter_args() throw();
  std::string filter;

  _WordSegService_setFilter_args__isset __isset;

  void __set_filter(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class WordSegService_setFilter_pargs {
 public:


  virtual ~WordSegService_setFilter_pargs() throw();
  const std::string* filter;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class WordSegService_setFilter_result {
 public:

  WordSegService_setFilter_result(const WordSegService_setFilter_result&);
  WordSegService_setFilter_result(WordSegService_setFilter_result&&);
  WordSegService_setFilter_result& operator=(const WordSegService_setFilter_result&);
  WordSegService_setFilter_result& operator=(WordSegService_setFilter_result&&);
  WordSegService_setFilter_result() {
  }

  virtual ~WordSegService_setFilter_result() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class WordSegService_setFilter_presult {
 public:


  virtual ~WordSegService_setFilter_presult() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _WordSegService_tag_args__isset {
  _WordSegService_tag_args__isset() : sentence(false) {}
  bool sentence :1;
} _WordSegService_tag_args__isset;

class WordSegService_tag_args {
 public:

  WordSegService_tag_args(const WordSegService_tag_args&);
  WordSegService_tag_args(WordSegService_tag_args&&);
  WordSegService_tag_args& operator=(const WordSegService_tag_args&);
  WordSegService_tag_args& operator=(WordSegService_tag_args&&);
  WordSegService_tag_args() : sentence() {
  }

  virtual ~WordSegService_tag_args() throw();
  std::string sentence;

  _WordSegService_tag_args__isset __isset;

  void __set_sentence(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class WordSegService_tag_pargs {
 public:


  virtual ~WordSegService_tag_pargs() throw();
  const std::string* sentence;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _WordSegService_tag_result__isset {
  _WordSegService_tag_result__isset() : success(false) {}
  bool success :1;
} _WordSegService_tag_result__isset;

class WordSegService_tag_result {
 public:

  WordSegService_tag_result(const WordSegService_tag_result&);
  WordSegService_tag_result(WordSegService_tag_result&&);
  WordSegService_tag_result& operator=(const WordSegService_tag_result&);
  WordSegService_tag_result& operator=(WordSegService_tag_result&&);
  WordSegService_tag_result() {
  }

  virtual ~WordSegService_tag_result() throw();
  std::vector<ResultItem>  success;

  _WordSegService_tag_result__isset __isset;

  void __set_success(const std::vector<ResultItem> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _WordSegService_tag_presult__isset {
  _WordSegService_tag_presult__isset() : success(false) {}
  bool success :1;
} _WordSegService_tag_presult__isset;

class WordSegService_tag_presult {
 public:


  virtual ~WordSegService_tag_presult() throw();
  std::vector<ResultItem> * success;

  _WordSegService_tag_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _WordSegService_tagOnlyItem_args__isset {
  _WordSegService_tagOnlyItem_args__isset() : sentence(false) {}
  bool sentence :1;
} _WordSegService_tagOnlyItem_args__isset;

class WordSegService_tagOnlyItem_args {
 public:

  WordSegService_tagOnlyItem_args(const WordSegService_tagOnlyItem_args&);
  WordSegService_tagOnlyItem_args(WordSegService_tagOnlyItem_args&&);
  WordSegService_tagOnlyItem_args& operator=(const WordSegService_tagOnlyItem_args&);
  WordSegService_tagOnlyItem_args& operator=(WordSegService_tagOnlyItem_args&&);
  WordSegService_tagOnlyItem_args() : sentence() {
  }

  virtual ~WordSegService_tagOnlyItem_args() throw();
  std::string sentence;

  _WordSegService_tagOnlyItem_args__isset __isset;

  void __set_sentence(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class WordSegService_tagOnlyItem_pargs {
 public:


  virtual ~WordSegService_tagOnlyItem_pargs() throw();
  const std::string* sentence;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _WordSegService_tagOnlyItem_result__isset {
  _WordSegService_tagOnlyItem_result__isset() : success(false) {}
  bool success :1;
} _WordSegService_tagOnlyItem_result__isset;

class WordSegService_tagOnlyItem_result {
 public:

  WordSegService_tagOnlyItem_result(const WordSegService_tagOnlyItem_result&);
  WordSegService_tagOnlyItem_result(WordSegService_tagOnlyItem_result&&);
  WordSegService_tagOnlyItem_result& operator=(const WordSegService_tagOnlyItem_result&);
  WordSegService_tagOnlyItem_result& operator=(WordSegService_tagOnlyItem_result&&);
  WordSegService_tagOnlyItem_result() {
  }

  virtual ~WordSegService_tagOnlyItem_result() throw();
  std::vector<std::string>  success;

  _WordSegService_tagOnlyItem_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _WordSegService_tagOnlyItem_presult__isset {
  _WordSegService_tagOnlyItem_presult__isset() : success(false) {}
  bool success :1;
} _WordSegService_tagOnlyItem_presult__isset;

class WordSegService_tagOnlyItem_presult {
 public:


  virtual ~WordSegService_tagOnlyItem_presult() throw();
  std::vector<std::string> * success;

  _WordSegService_tagOnlyItem_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _WordSegService_handleRequest_args__isset {
  _WordSegService_handleRequest_args__isset() : request(false) {}
  bool request :1;
} _WordSegService_handleRequest_args__isset;

class WordSegService_handleRequest_args {
 public:

  WordSegService_handleRequest_args(const WordSegService_handleRequest_args&);
  WordSegService_handleRequest_args(WordSegService_handleRequest_args&&);
  WordSegService_handleRequest_args& operator=(const WordSegService_handleRequest_args&);
  WordSegService_handleRequest_args& operator=(WordSegService_handleRequest_args&&);
  WordSegService_handleRequest_args() : request() {
  }

  virtual ~WordSegService_handleRequest_args() throw();
  std::string request;

  _WordSegService_handleRequest_args__isset __isset;

  void __set_request(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class WordSegService_handleRequest_pargs {
 public:


  virtual ~WordSegService_handleRequest_pargs() throw();
  const std::string* request;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _WordSegService_handleRequest_result__isset {
  _WordSegService_handleRequest_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _WordSegService_handleRequest_result__isset;

class WordSegService_handleRequest_result {
 public:

  WordSegService_handleRequest_result(const WordSegService_handleRequest_result&);
  WordSegService_handleRequest_result(WordSegService_handleRequest_result&&);
  WordSegService_handleRequest_result& operator=(const WordSegService_handleRequest_result&);
  WordSegService_handleRequest_result& operator=(WordSegService_handleRequest_result&&);
  WordSegService_handleRequest_result() : success() {
  }

  virtual ~WordSegService_handleRequest_result() throw();
  std::string success;
  InvalidRequest err;

  _WordSegService_handleRequest_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_err(const InvalidRequest& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _WordSegService_handleRequest_presult__isset {
  _WordSegService_handleRequest_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _WordSegService_handleRequest_presult__isset;

class WordSegService_handleRequest_presult {
 public:


  virtual ~WordSegService_handleRequest_presult() throw();
  std::string* success;
  InvalidRequest err;

  _WordSegService_handleRequest_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class WordSegServiceClientT : virtual public WordSegServiceIf {
 public:
  WordSegServiceClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  WordSegServiceClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void setFilter(const std::string& filter);
  void send_setFilter(const std::string& filter);
  void recv_setFilter();
  void tag(std::vector<ResultItem> & _return, const std::string& sentence);
  void send_tag(const std::string& sentence);
  void recv_tag(std::vector<ResultItem> & _return);
  void tagOnlyItem(std::vector<std::string> & _return, const std::string& sentence);
  void send_tagOnlyItem(const std::string& sentence);
  void recv_tagOnlyItem(std::vector<std::string> & _return);
  void handleRequest(std::string& _return, const std::string& request);
  void send_handleRequest(const std::string& request);
  void recv_handleRequest(std::string& _return);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef WordSegServiceClientT< ::apache::thrift::protocol::TProtocol> WordSegServiceClient;

template <class Protocol_>
class WordSegServiceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  boost::shared_ptr<WordSegServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WordSegServiceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (WordSegServiceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_setFilter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setFilter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_tag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tag(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_tagOnlyItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tagOnlyItem(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_handleRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_handleRequest(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  WordSegServiceProcessorT(boost::shared_ptr<WordSegServiceIf> iface) :
    iface_(iface) {
    processMap_["setFilter"] = ProcessFunctions(
      &WordSegServiceProcessorT::process_setFilter,
      &WordSegServiceProcessorT::process_setFilter);
    processMap_["tag"] = ProcessFunctions(
      &WordSegServiceProcessorT::process_tag,
      &WordSegServiceProcessorT::process_tag);
    processMap_["tagOnlyItem"] = ProcessFunctions(
      &WordSegServiceProcessorT::process_tagOnlyItem,
      &WordSegServiceProcessorT::process_tagOnlyItem);
    processMap_["handleRequest"] = ProcessFunctions(
      &WordSegServiceProcessorT::process_handleRequest,
      &WordSegServiceProcessorT::process_handleRequest);
  }

  virtual ~WordSegServiceProcessorT() {}
};

typedef WordSegServiceProcessorT< ::apache::thrift::protocol::TDummyProtocol > WordSegServiceProcessor;

template <class Protocol_>
class WordSegServiceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  WordSegServiceProcessorFactoryT(const ::boost::shared_ptr< WordSegServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WordSegServiceIfFactory > handlerFactory_;
};

typedef WordSegServiceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > WordSegServiceProcessorFactory;

class WordSegServiceMultiface : virtual public WordSegServiceIf {
 public:
  WordSegServiceMultiface(std::vector<boost::shared_ptr<WordSegServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WordSegServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WordSegServiceIf> > ifaces_;
  WordSegServiceMultiface() {}
  void add(boost::shared_ptr<WordSegServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setFilter(const std::string& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setFilter(filter);
    }
    ifaces_[i]->setFilter(filter);
  }

  void tag(std::vector<ResultItem> & _return, const std::string& sentence) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tag(_return, sentence);
    }
    ifaces_[i]->tag(_return, sentence);
    return;
  }

  void tagOnlyItem(std::vector<std::string> & _return, const std::string& sentence) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tagOnlyItem(_return, sentence);
    }
    ifaces_[i]->tagOnlyItem(_return, sentence);
    return;
  }

  void handleRequest(std::string& _return, const std::string& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->handleRequest(_return, request);
    }
    ifaces_[i]->handleRequest(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class WordSegServiceConcurrentClientT : virtual public WordSegServiceIf {
 public:
  WordSegServiceConcurrentClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  WordSegServiceConcurrentClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void setFilter(const std::string& filter);
  int32_t send_setFilter(const std::string& filter);
  void recv_setFilter(const int32_t seqid);
  void tag(std::vector<ResultItem> & _return, const std::string& sentence);
  int32_t send_tag(const std::string& sentence);
  void recv_tag(std::vector<ResultItem> & _return, const int32_t seqid);
  void tagOnlyItem(std::vector<std::string> & _return, const std::string& sentence);
  int32_t send_tagOnlyItem(const std::string& sentence);
  void recv_tagOnlyItem(std::vector<std::string> & _return, const int32_t seqid);
  void handleRequest(std::string& _return, const std::string& request);
  int32_t send_handleRequest(const std::string& request);
  void recv_handleRequest(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef WordSegServiceConcurrentClientT< ::apache::thrift::protocol::TProtocol> WordSegServiceConcurrentClient;

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#include "WordSegService.tcc"
#include "wordseg_types.tcc"

#endif
