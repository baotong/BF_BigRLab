/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef article_TYPES_H
#define article_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Article {

class InvalidRequest;

class KeywordResult;

class KnnResult;

typedef struct _InvalidRequest__isset {
  _InvalidRequest__isset() : reason(false) {}
  bool reason :1;
} _InvalidRequest__isset;

class InvalidRequest : public ::apache::thrift::TException {
 public:

  InvalidRequest(const InvalidRequest&);
  InvalidRequest(InvalidRequest&&);
  InvalidRequest& operator=(const InvalidRequest&);
  InvalidRequest& operator=(InvalidRequest&&);
  InvalidRequest() : reason() {
  }

  virtual ~InvalidRequest() throw();
  std::string reason;

  _InvalidRequest__isset __isset;

  void __set_reason(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidRequest &a, InvalidRequest &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _KeywordResult__isset {
  _KeywordResult__isset() : word(false), weight(false) {}
  bool word :1;
  bool weight :1;
} _KeywordResult__isset;

class KeywordResult {
 public:

  KeywordResult(const KeywordResult&);
  KeywordResult(KeywordResult&&);
  KeywordResult& operator=(const KeywordResult&);
  KeywordResult& operator=(KeywordResult&&);
  KeywordResult() : word(), weight(0) {
  }

  virtual ~KeywordResult() throw();
  std::string word;
  double weight;

  _KeywordResult__isset __isset;

  void __set_word(const std::string& val);

  void __set_weight(const double val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KeywordResult &a, KeywordResult &b);

inline std::ostream& operator<<(std::ostream& out, const KeywordResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _KnnResult__isset {
  _KnnResult__isset() : id(false), distance(false) {}
  bool id :1;
  bool distance :1;
} _KnnResult__isset;

class KnnResult {
 public:

  KnnResult(const KnnResult&);
  KnnResult(KnnResult&&);
  KnnResult& operator=(const KnnResult&);
  KnnResult& operator=(KnnResult&&);
  KnnResult() : id(0), distance(0) {
  }

  virtual ~KnnResult() throw();
  int64_t id;
  double distance;

  _KnnResult__isset __isset;

  void __set_id(const int64_t val);

  void __set_distance(const double val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KnnResult &a, KnnResult &b);

inline std::ostream& operator<<(std::ostream& out, const KnnResult& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#include "article_types.tcc"

#endif
