/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef wordseg_TYPES_H
#define wordseg_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace WordSeg {

class InvalidRequest;

class ResultItem;

typedef struct _InvalidRequest__isset {
  _InvalidRequest__isset() : reason(false) {}
  bool reason :1;
} _InvalidRequest__isset;

class InvalidRequest : public ::apache::thrift::TException {
 public:

  InvalidRequest(const InvalidRequest&);
  InvalidRequest(InvalidRequest&&);
  InvalidRequest& operator=(const InvalidRequest&);
  InvalidRequest& operator=(InvalidRequest&&);
  InvalidRequest() : reason() {
  }

  virtual ~InvalidRequest() throw();
  std::string reason;

  _InvalidRequest__isset __isset;

  void __set_reason(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidRequest &a, InvalidRequest &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ResultItem__isset {
  _ResultItem__isset() : item(false), tag(false) {}
  bool item :1;
  bool tag :1;
} _ResultItem__isset;

class ResultItem {
 public:

  ResultItem(const ResultItem&);
  ResultItem(ResultItem&&);
  ResultItem& operator=(const ResultItem&);
  ResultItem& operator=(ResultItem&&);
  ResultItem() : item(), tag() {
  }

  virtual ~ResultItem() throw();
  std::string item;
  std::string tag;

  _ResultItem__isset __isset;

  void __set_item(const std::string& val);

  void __set_tag(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResultItem &a, ResultItem &b);

inline std::ostream& operator<<(std::ostream& out, const ResultItem& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#include "wordseg_types.tcc"

#endif
