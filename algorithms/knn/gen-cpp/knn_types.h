/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef knn_TYPES_H
#define knn_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "AlgCommon_types.h"


namespace KNN {

class Result;

typedef struct _Result__isset {
  _Result__isset() : item(false), weight(false) {}
  bool item :1;
  bool weight :1;
} _Result__isset;

class Result {
 public:

  Result(const Result&);
  Result(Result&&);
  Result& operator=(const Result&);
  Result& operator=(Result&&);
  Result() : item(), weight(0) {
  }

  virtual ~Result() throw();
  std::string item;
  double weight;

  _Result__isset __isset;

  void __set_item(const std::string& val);

  void __set_weight(const double val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Result &a, Result &b);

inline std::ostream& operator<<(std::ostream& out, const Result& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#include "knn_types.tcc"

#endif
