/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "article_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Article {


KeywordResult::~KeywordResult() throw() {
}


void KeywordResult::__set_word(const std::string& val) {
  this->word = val;
}

void KeywordResult::__set_weight(const double val) {
  this->weight = val;
}

void swap(KeywordResult &a, KeywordResult &b) {
  using ::std::swap;
  swap(a.word, b.word);
  swap(a.weight, b.weight);
  swap(a.__isset, b.__isset);
}

KeywordResult::KeywordResult(const KeywordResult& other0) {
  word = other0.word;
  weight = other0.weight;
  __isset = other0.__isset;
}
KeywordResult::KeywordResult( KeywordResult&& other1) {
  word = std::move(other1.word);
  weight = std::move(other1.weight);
  __isset = std::move(other1.__isset);
}
KeywordResult& KeywordResult::operator=(const KeywordResult& other2) {
  word = other2.word;
  weight = other2.weight;
  __isset = other2.__isset;
  return *this;
}
KeywordResult& KeywordResult::operator=(KeywordResult&& other3) {
  word = std::move(other3.word);
  weight = std::move(other3.weight);
  __isset = std::move(other3.__isset);
  return *this;
}
void KeywordResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KeywordResult(";
  out << "word=" << to_string(word);
  out << ", " << "weight=" << to_string(weight);
  out << ")";
}


KnnResult::~KnnResult() throw() {
}


void KnnResult::__set_id(const int64_t val) {
  this->id = val;
}

void KnnResult::__set_distance(const double val) {
  this->distance = val;
}

void KnnResult::__set_label(const std::string& val) {
  this->label = val;
}

void KnnResult::__set_score(const double val) {
  this->score = val;
}

void swap(KnnResult &a, KnnResult &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.distance, b.distance);
  swap(a.label, b.label);
  swap(a.score, b.score);
  swap(a.__isset, b.__isset);
}

KnnResult::KnnResult(const KnnResult& other4) {
  id = other4.id;
  distance = other4.distance;
  label = other4.label;
  score = other4.score;
  __isset = other4.__isset;
}
KnnResult::KnnResult( KnnResult&& other5) {
  id = std::move(other5.id);
  distance = std::move(other5.distance);
  label = std::move(other5.label);
  score = std::move(other5.score);
  __isset = std::move(other5.__isset);
}
KnnResult& KnnResult::operator=(const KnnResult& other6) {
  id = other6.id;
  distance = other6.distance;
  label = other6.label;
  score = other6.score;
  __isset = other6.__isset;
  return *this;
}
KnnResult& KnnResult::operator=(KnnResult&& other7) {
  id = std::move(other7.id);
  distance = std::move(other7.distance);
  label = std::move(other7.label);
  score = std::move(other7.score);
  __isset = std::move(other7.__isset);
  return *this;
}
void KnnResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KnnResult(";
  out << "id=" << to_string(id);
  out << ", " << "distance=" << to_string(distance);
  out << ", " << "label=" << to_string(label);
  out << ", " << "score=" << to_string(score);
  out << ")";
}

} // namespace
