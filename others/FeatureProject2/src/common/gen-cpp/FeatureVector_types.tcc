/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FeatureVector_TYPES_TCC
#define FeatureVector_TYPES_TCC

#include "FeatureVector_types.h"

namespace FeatureProject {

template <class Protocol_>
uint32_t FeatureVector::read(Protocol_* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->stringFeatures.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::set<std::string> & _val6 = this->stringFeatures[_key5];
              {
                _val6.clear();
                uint32_t _size7;
                ::apache::thrift::protocol::TType _etype10;
                xfer += iprot->readSetBegin(_etype10, _size7);
                uint32_t _i11;
                for (_i11 = 0; _i11 < _size7; ++_i11)
                {
                  std::string _elem12;
                  xfer += iprot->readString(_elem12);
                  _val6.insert(_elem12);
                }
                xfer += iprot->readSetEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.stringFeatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->floatFeatures.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _ktype14;
            ::apache::thrift::protocol::TType _vtype15;
            xfer += iprot->readMapBegin(_ktype14, _vtype15, _size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              std::string _key18;
              xfer += iprot->readString(_key18);
              std::map<std::string, double> & _val19 = this->floatFeatures[_key18];
              {
                _val19.clear();
                uint32_t _size20;
                ::apache::thrift::protocol::TType _ktype21;
                ::apache::thrift::protocol::TType _vtype22;
                xfer += iprot->readMapBegin(_ktype21, _vtype22, _size20);
                uint32_t _i24;
                for (_i24 = 0; _i24 < _size20; ++_i24)
                {
                  std::string _key25;
                  xfer += iprot->readString(_key25);
                  double& _val26 = _val19[_key25];
                  xfer += iprot->readDouble(_val26);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.floatFeatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->denseFeatures.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _ktype28;
            ::apache::thrift::protocol::TType _vtype29;
            xfer += iprot->readMapBegin(_ktype28, _vtype29, _size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              std::string _key32;
              xfer += iprot->readString(_key32);
              std::vector<double> & _val33 = this->denseFeatures[_key32];
              {
                _val33.clear();
                uint32_t _size34;
                ::apache::thrift::protocol::TType _etype37;
                xfer += iprot->readListBegin(_etype37, _size34);
                _val33.resize(_size34);
                uint32_t _i38;
                for (_i38 = 0; _i38 < _size34; ++_i38)
                {
                  xfer += iprot->readDouble(_val33[_i38]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.denseFeatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t FeatureVector::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeatureVector");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stringFeatures) {
    xfer += oprot->writeFieldBegin("stringFeatures", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->stringFeatures.size()));
      std::map<std::string, std::set<std::string> > ::const_iterator _iter39;
      for (_iter39 = this->stringFeatures.begin(); _iter39 != this->stringFeatures.end(); ++_iter39)
      {
        xfer += oprot->writeString(_iter39->first);
        {
          xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter39->second.size()));
          std::set<std::string> ::const_iterator _iter40;
          for (_iter40 = _iter39->second.begin(); _iter40 != _iter39->second.end(); ++_iter40)
          {
            xfer += oprot->writeString((*_iter40));
          }
          xfer += oprot->writeSetEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.floatFeatures) {
    xfer += oprot->writeFieldBegin("floatFeatures", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->floatFeatures.size()));
      std::map<std::string, std::map<std::string, double> > ::const_iterator _iter41;
      for (_iter41 = this->floatFeatures.begin(); _iter41 != this->floatFeatures.end(); ++_iter41)
      {
        xfer += oprot->writeString(_iter41->first);
        {
          xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(_iter41->second.size()));
          std::map<std::string, double> ::const_iterator _iter42;
          for (_iter42 = _iter41->second.begin(); _iter42 != _iter41->second.end(); ++_iter42)
          {
            xfer += oprot->writeString(_iter42->first);
            xfer += oprot->writeDouble(_iter42->second);
          }
          xfer += oprot->writeMapEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.denseFeatures) {
    xfer += oprot->writeFieldBegin("denseFeatures", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->denseFeatures.size()));
      std::map<std::string, std::vector<double> > ::const_iterator _iter43;
      for (_iter43 = this->denseFeatures.begin(); _iter43 != this->denseFeatures.end(); ++_iter43)
      {
        xfer += oprot->writeString(_iter43->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(_iter43->second.size()));
          std::vector<double> ::const_iterator _iter44;
          for (_iter44 = _iter43->second.begin(); _iter44 != _iter43->second.end(); ++_iter44)
          {
            xfer += oprot->writeDouble((*_iter44));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t FloatInfo::read(Protocol_* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->minVal);
          this->__isset.minVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->maxVal);
          this->__isset.maxVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t FloatInfo::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FloatInfo");

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minVal", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->minVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxVal", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->maxVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t DenseInfo::read(Protocol_* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startIdx);
          this->__isset.startIdx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->len);
          this->__isset.len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t DenseInfo::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DenseInfo");

  xfer += oprot->writeFieldBegin("startIdx", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->startIdx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("len", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->len);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t FeatureIndex::read(Protocol_* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->stringIndices.clear();
            uint32_t _size57;
            ::apache::thrift::protocol::TType _ktype58;
            ::apache::thrift::protocol::TType _vtype59;
            xfer += iprot->readMapBegin(_ktype58, _vtype59, _size57);
            uint32_t _i61;
            for (_i61 = 0; _i61 < _size57; ++_i61)
            {
              std::string _key62;
              xfer += iprot->readString(_key62);
              std::map<std::string, int32_t> & _val63 = this->stringIndices[_key62];
              {
                _val63.clear();
                uint32_t _size64;
                ::apache::thrift::protocol::TType _ktype65;
                ::apache::thrift::protocol::TType _vtype66;
                xfer += iprot->readMapBegin(_ktype65, _vtype66, _size64);
                uint32_t _i68;
                for (_i68 = 0; _i68 < _size64; ++_i68)
                {
                  std::string _key69;
                  xfer += iprot->readString(_key69);
                  int32_t& _val70 = _val63[_key69];
                  xfer += iprot->readI32(_val70);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.stringIndices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->floatInfo.clear();
            uint32_t _size71;
            ::apache::thrift::protocol::TType _ktype72;
            ::apache::thrift::protocol::TType _vtype73;
            xfer += iprot->readMapBegin(_ktype72, _vtype73, _size71);
            uint32_t _i75;
            for (_i75 = 0; _i75 < _size71; ++_i75)
            {
              std::string _key76;
              xfer += iprot->readString(_key76);
              std::map<std::string, FloatInfo> & _val77 = this->floatInfo[_key76];
              {
                _val77.clear();
                uint32_t _size78;
                ::apache::thrift::protocol::TType _ktype79;
                ::apache::thrift::protocol::TType _vtype80;
                xfer += iprot->readMapBegin(_ktype79, _vtype80, _size78);
                uint32_t _i82;
                for (_i82 = 0; _i82 < _size78; ++_i82)
                {
                  std::string _key83;
                  xfer += iprot->readString(_key83);
                  FloatInfo& _val84 = _val77[_key83];
                  xfer += _val84.read(iprot);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.floatInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->denseInfo.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _ktype86;
            ::apache::thrift::protocol::TType _vtype87;
            xfer += iprot->readMapBegin(_ktype86, _vtype87, _size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              std::string _key90;
              xfer += iprot->readString(_key90);
              DenseInfo& _val91 = this->denseInfo[_key90];
              xfer += _val91.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.denseInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t FeatureIndex::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeatureIndex");

  if (this->__isset.stringIndices) {
    xfer += oprot->writeFieldBegin("stringIndices", ::apache::thrift::protocol::T_MAP, 1);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->stringIndices.size()));
      std::map<std::string, std::map<std::string, int32_t> > ::const_iterator _iter92;
      for (_iter92 = this->stringIndices.begin(); _iter92 != this->stringIndices.end(); ++_iter92)
      {
        xfer += oprot->writeString(_iter92->first);
        {
          xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(_iter92->second.size()));
          std::map<std::string, int32_t> ::const_iterator _iter93;
          for (_iter93 = _iter92->second.begin(); _iter93 != _iter92->second.end(); ++_iter93)
          {
            xfer += oprot->writeString(_iter93->first);
            xfer += oprot->writeI32(_iter93->second);
          }
          xfer += oprot->writeMapEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.floatInfo) {
    xfer += oprot->writeFieldBegin("floatInfo", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->floatInfo.size()));
      std::map<std::string, std::map<std::string, FloatInfo> > ::const_iterator _iter94;
      for (_iter94 = this->floatInfo.begin(); _iter94 != this->floatInfo.end(); ++_iter94)
      {
        xfer += oprot->writeString(_iter94->first);
        {
          xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter94->second.size()));
          std::map<std::string, FloatInfo> ::const_iterator _iter95;
          for (_iter95 = _iter94->second.begin(); _iter95 != _iter94->second.end(); ++_iter95)
          {
            xfer += oprot->writeString(_iter95->first);
            xfer += _iter95->second.write(oprot);
          }
          xfer += oprot->writeMapEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.denseInfo) {
    xfer += oprot->writeFieldBegin("denseInfo", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->denseInfo.size()));
      std::map<std::string, DenseInfo> ::const_iterator _iter96;
      for (_iter96 = this->denseInfo.begin(); _iter96 != this->denseInfo.end(); ++_iter96)
      {
        xfer += oprot->writeString(_iter96->first);
        xfer += _iter96->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace

#endif
