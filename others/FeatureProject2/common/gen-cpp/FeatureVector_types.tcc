/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FeatureVector_TYPES_TCC
#define FeatureVector_TYPES_TCC

#include "FeatureVector_types.h"



template <class Protocol_>
uint32_t FeatureVector::read(Protocol_* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->stringFeatures.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::set<std::string> & _val6 = this->stringFeatures[_key5];
              {
                _val6.clear();
                uint32_t _size7;
                ::apache::thrift::protocol::TType _etype10;
                xfer += iprot->readSetBegin(_etype10, _size7);
                uint32_t _i11;
                for (_i11 = 0; _i11 < _size7; ++_i11)
                {
                  std::string _elem12;
                  xfer += iprot->readString(_elem12);
                  _val6.insert(_elem12);
                }
                xfer += iprot->readSetEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.stringFeatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->floatFeatures.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _ktype14;
            ::apache::thrift::protocol::TType _vtype15;
            xfer += iprot->readMapBegin(_ktype14, _vtype15, _size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              std::string _key18;
              xfer += iprot->readString(_key18);
              std::map<std::string, double> & _val19 = this->floatFeatures[_key18];
              {
                _val19.clear();
                uint32_t _size20;
                ::apache::thrift::protocol::TType _ktype21;
                ::apache::thrift::protocol::TType _vtype22;
                xfer += iprot->readMapBegin(_ktype21, _vtype22, _size20);
                uint32_t _i24;
                for (_i24 = 0; _i24 < _size20; ++_i24)
                {
                  std::string _key25;
                  xfer += iprot->readString(_key25);
                  double& _val26 = _val19[_key25];
                  xfer += iprot->readDouble(_val26);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.floatFeatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->denseFeatures.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _ktype28;
            ::apache::thrift::protocol::TType _vtype29;
            xfer += iprot->readMapBegin(_ktype28, _vtype29, _size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              std::string _key32;
              xfer += iprot->readString(_key32);
              std::vector<double> & _val33 = this->denseFeatures[_key32];
              {
                _val33.clear();
                uint32_t _size34;
                ::apache::thrift::protocol::TType _etype37;
                xfer += iprot->readListBegin(_etype37, _size34);
                _val33.resize(_size34);
                uint32_t _i38;
                for (_i38 = 0; _i38 < _size34; ++_i38)
                {
                  xfer += iprot->readDouble(_val33[_i38]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.denseFeatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t FeatureVector::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeatureVector");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stringFeatures) {
    xfer += oprot->writeFieldBegin("stringFeatures", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->stringFeatures.size()));
      std::map<std::string, std::set<std::string> > ::const_iterator _iter39;
      for (_iter39 = this->stringFeatures.begin(); _iter39 != this->stringFeatures.end(); ++_iter39)
      {
        xfer += oprot->writeString(_iter39->first);
        {
          xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter39->second.size()));
          std::set<std::string> ::const_iterator _iter40;
          for (_iter40 = _iter39->second.begin(); _iter40 != _iter39->second.end(); ++_iter40)
          {
            xfer += oprot->writeString((*_iter40));
          }
          xfer += oprot->writeSetEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.floatFeatures) {
    xfer += oprot->writeFieldBegin("floatFeatures", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->floatFeatures.size()));
      std::map<std::string, std::map<std::string, double> > ::const_iterator _iter41;
      for (_iter41 = this->floatFeatures.begin(); _iter41 != this->floatFeatures.end(); ++_iter41)
      {
        xfer += oprot->writeString(_iter41->first);
        {
          xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(_iter41->second.size()));
          std::map<std::string, double> ::const_iterator _iter42;
          for (_iter42 = _iter41->second.begin(); _iter42 != _iter41->second.end(); ++_iter42)
          {
            xfer += oprot->writeString(_iter42->first);
            xfer += oprot->writeDouble(_iter42->second);
          }
          xfer += oprot->writeMapEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.denseFeatures) {
    xfer += oprot->writeFieldBegin("denseFeatures", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->denseFeatures.size()));
      std::map<std::string, std::vector<double> > ::const_iterator _iter43;
      for (_iter43 = this->denseFeatures.begin(); _iter43 != this->denseFeatures.end(); ++_iter43)
      {
        xfer += oprot->writeString(_iter43->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(_iter43->second.size()));
          std::vector<double> ::const_iterator _iter44;
          for (_iter44 = _iter43->second.begin(); _iter44 != _iter43->second.end(); ++_iter44)
          {
            xfer += oprot->writeDouble((*_iter44));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}



#endif
