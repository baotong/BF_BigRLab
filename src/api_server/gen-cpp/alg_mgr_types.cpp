/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "alg_mgr_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace BigRLab {

int _kErrCodeTypeValues[] = {
  SUCCESS,
  ALREADY_EXIST,
  NO_SERVER
};
const char* _kErrCodeTypeNames[] = {
  "SUCCESS",
  "ALREADY_EXIST",
  "NO_SERVER"
};
const std::map<int, const char*> _ErrCodeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kErrCodeTypeValues, _kErrCodeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


InvalidRequest::~InvalidRequest() throw() {
}


void InvalidRequest::__set_desc(const std::string& val) {
  this->desc = val;
}

void InvalidRequest::__set_errCode(const ErrCodeType val) {
  this->errCode = val;
}

void swap(InvalidRequest &a, InvalidRequest &b) {
  using ::std::swap;
  swap(a.desc, b.desc);
  swap(a.errCode, b.errCode);
  swap(a.__isset, b.__isset);
}

InvalidRequest::InvalidRequest(const InvalidRequest& other1) : TException() {
  desc = other1.desc;
  errCode = other1.errCode;
  __isset = other1.__isset;
}
InvalidRequest::InvalidRequest( InvalidRequest&& other2) : TException() {
  desc = std::move(other2.desc);
  errCode = std::move(other2.errCode);
  __isset = std::move(other2.__isset);
}
InvalidRequest& InvalidRequest::operator=(const InvalidRequest& other3) {
  desc = other3.desc;
  errCode = other3.errCode;
  __isset = other3.__isset;
  return *this;
}
InvalidRequest& InvalidRequest::operator=(InvalidRequest&& other4) {
  desc = std::move(other4.desc);
  errCode = std::move(other4.errCode);
  __isset = std::move(other4.__isset);
  return *this;
}
void InvalidRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidRequest(";
  out << "desc=" << to_string(desc);
  out << ", " << "errCode=" << to_string(errCode);
  out << ")";
}

const char* InvalidRequest::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidRequest";
  }
}


AlgSvrInfo::~AlgSvrInfo() throw() {
}


void AlgSvrInfo::__set_addr(const std::string& val) {
  this->addr = val;
}

void AlgSvrInfo::__set_port(const int16_t val) {
  this->port = val;
}

void AlgSvrInfo::__set_maxConcurrency(const int32_t val) {
  this->maxConcurrency = val;
}

void swap(AlgSvrInfo &a, AlgSvrInfo &b) {
  using ::std::swap;
  swap(a.addr, b.addr);
  swap(a.port, b.port);
  swap(a.maxConcurrency, b.maxConcurrency);
  swap(a.__isset, b.__isset);
}

AlgSvrInfo::AlgSvrInfo(const AlgSvrInfo& other5) {
  addr = other5.addr;
  port = other5.port;
  maxConcurrency = other5.maxConcurrency;
  __isset = other5.__isset;
}
AlgSvrInfo::AlgSvrInfo( AlgSvrInfo&& other6) {
  addr = std::move(other6.addr);
  port = std::move(other6.port);
  maxConcurrency = std::move(other6.maxConcurrency);
  __isset = std::move(other6.__isset);
}
AlgSvrInfo& AlgSvrInfo::operator=(const AlgSvrInfo& other7) {
  addr = other7.addr;
  port = other7.port;
  maxConcurrency = other7.maxConcurrency;
  __isset = other7.__isset;
  return *this;
}
AlgSvrInfo& AlgSvrInfo::operator=(AlgSvrInfo&& other8) {
  addr = std::move(other8.addr);
  port = std::move(other8.port);
  maxConcurrency = std::move(other8.maxConcurrency);
  __isset = std::move(other8.__isset);
  return *this;
}
void AlgSvrInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlgSvrInfo(";
  out << "addr=" << to_string(addr);
  out << ", " << "port=" << to_string(port);
  out << ", " << "maxConcurrency=" << to_string(maxConcurrency);
  out << ")";
}

} // namespace
