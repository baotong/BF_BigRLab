/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AlgMgrService_H
#define AlgMgrService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "alg_mgr_types.h"

namespace BigRLab {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AlgMgrServiceIf {
 public:
  virtual ~AlgMgrServiceIf() {}
  virtual int32_t addSvr(const std::string& algName, const AlgSvrInfo& svrInfo) = 0;
  virtual void rmSvr(const std::string& algName, const AlgSvrInfo& svrInfo) = 0;
  virtual void informAlive(const std::string& algName, const AlgSvrInfo& svrInfo) = 0;
  virtual void getAlgSvrList(std::vector<AlgSvrInfo> & _return, const std::string& name) = 0;
};

class AlgMgrServiceIfFactory {
 public:
  typedef AlgMgrServiceIf Handler;

  virtual ~AlgMgrServiceIfFactory() {}

  virtual AlgMgrServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AlgMgrServiceIf* /* handler */) = 0;
};

class AlgMgrServiceIfSingletonFactory : virtual public AlgMgrServiceIfFactory {
 public:
  AlgMgrServiceIfSingletonFactory(const boost::shared_ptr<AlgMgrServiceIf>& iface) : iface_(iface) {}
  virtual ~AlgMgrServiceIfSingletonFactory() {}

  virtual AlgMgrServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AlgMgrServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AlgMgrServiceIf> iface_;
};

class AlgMgrServiceNull : virtual public AlgMgrServiceIf {
 public:
  virtual ~AlgMgrServiceNull() {}
  int32_t addSvr(const std::string& /* algName */, const AlgSvrInfo& /* svrInfo */) {
    int32_t _return = 0;
    return _return;
  }
  void rmSvr(const std::string& /* algName */, const AlgSvrInfo& /* svrInfo */) {
    return;
  }
  void informAlive(const std::string& /* algName */, const AlgSvrInfo& /* svrInfo */) {
    return;
  }
  void getAlgSvrList(std::vector<AlgSvrInfo> & /* _return */, const std::string& /* name */) {
    return;
  }
};

typedef struct _AlgMgrService_addSvr_args__isset {
  _AlgMgrService_addSvr_args__isset() : algName(false), svrInfo(false) {}
  bool algName :1;
  bool svrInfo :1;
} _AlgMgrService_addSvr_args__isset;

class AlgMgrService_addSvr_args {
 public:

  AlgMgrService_addSvr_args(const AlgMgrService_addSvr_args&);
  AlgMgrService_addSvr_args(AlgMgrService_addSvr_args&&);
  AlgMgrService_addSvr_args& operator=(const AlgMgrService_addSvr_args&);
  AlgMgrService_addSvr_args& operator=(AlgMgrService_addSvr_args&&);
  AlgMgrService_addSvr_args() : algName() {
  }

  virtual ~AlgMgrService_addSvr_args() throw();
  std::string algName;
  AlgSvrInfo svrInfo;

  _AlgMgrService_addSvr_args__isset __isset;

  void __set_algName(const std::string& val);

  void __set_svrInfo(const AlgSvrInfo& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class AlgMgrService_addSvr_pargs {
 public:


  virtual ~AlgMgrService_addSvr_pargs() throw();
  const std::string* algName;
  const AlgSvrInfo* svrInfo;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _AlgMgrService_addSvr_result__isset {
  _AlgMgrService_addSvr_result__isset() : success(false) {}
  bool success :1;
} _AlgMgrService_addSvr_result__isset;

class AlgMgrService_addSvr_result {
 public:

  AlgMgrService_addSvr_result(const AlgMgrService_addSvr_result&);
  AlgMgrService_addSvr_result(AlgMgrService_addSvr_result&&);
  AlgMgrService_addSvr_result& operator=(const AlgMgrService_addSvr_result&);
  AlgMgrService_addSvr_result& operator=(AlgMgrService_addSvr_result&&);
  AlgMgrService_addSvr_result() : success(0) {
  }

  virtual ~AlgMgrService_addSvr_result() throw();
  int32_t success;

  _AlgMgrService_addSvr_result__isset __isset;

  void __set_success(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _AlgMgrService_addSvr_presult__isset {
  _AlgMgrService_addSvr_presult__isset() : success(false) {}
  bool success :1;
} _AlgMgrService_addSvr_presult__isset;

class AlgMgrService_addSvr_presult {
 public:


  virtual ~AlgMgrService_addSvr_presult() throw();
  int32_t* success;

  _AlgMgrService_addSvr_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _AlgMgrService_rmSvr_args__isset {
  _AlgMgrService_rmSvr_args__isset() : algName(false), svrInfo(false) {}
  bool algName :1;
  bool svrInfo :1;
} _AlgMgrService_rmSvr_args__isset;

class AlgMgrService_rmSvr_args {
 public:

  AlgMgrService_rmSvr_args(const AlgMgrService_rmSvr_args&);
  AlgMgrService_rmSvr_args(AlgMgrService_rmSvr_args&&);
  AlgMgrService_rmSvr_args& operator=(const AlgMgrService_rmSvr_args&);
  AlgMgrService_rmSvr_args& operator=(AlgMgrService_rmSvr_args&&);
  AlgMgrService_rmSvr_args() : algName() {
  }

  virtual ~AlgMgrService_rmSvr_args() throw();
  std::string algName;
  AlgSvrInfo svrInfo;

  _AlgMgrService_rmSvr_args__isset __isset;

  void __set_algName(const std::string& val);

  void __set_svrInfo(const AlgSvrInfo& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class AlgMgrService_rmSvr_pargs {
 public:


  virtual ~AlgMgrService_rmSvr_pargs() throw();
  const std::string* algName;
  const AlgSvrInfo* svrInfo;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class AlgMgrService_rmSvr_result {
 public:

  AlgMgrService_rmSvr_result(const AlgMgrService_rmSvr_result&);
  AlgMgrService_rmSvr_result(AlgMgrService_rmSvr_result&&);
  AlgMgrService_rmSvr_result& operator=(const AlgMgrService_rmSvr_result&);
  AlgMgrService_rmSvr_result& operator=(AlgMgrService_rmSvr_result&&);
  AlgMgrService_rmSvr_result() {
  }

  virtual ~AlgMgrService_rmSvr_result() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class AlgMgrService_rmSvr_presult {
 public:


  virtual ~AlgMgrService_rmSvr_presult() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _AlgMgrService_informAlive_args__isset {
  _AlgMgrService_informAlive_args__isset() : algName(false), svrInfo(false) {}
  bool algName :1;
  bool svrInfo :1;
} _AlgMgrService_informAlive_args__isset;

class AlgMgrService_informAlive_args {
 public:

  AlgMgrService_informAlive_args(const AlgMgrService_informAlive_args&);
  AlgMgrService_informAlive_args(AlgMgrService_informAlive_args&&);
  AlgMgrService_informAlive_args& operator=(const AlgMgrService_informAlive_args&);
  AlgMgrService_informAlive_args& operator=(AlgMgrService_informAlive_args&&);
  AlgMgrService_informAlive_args() : algName() {
  }

  virtual ~AlgMgrService_informAlive_args() throw();
  std::string algName;
  AlgSvrInfo svrInfo;

  _AlgMgrService_informAlive_args__isset __isset;

  void __set_algName(const std::string& val);

  void __set_svrInfo(const AlgSvrInfo& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class AlgMgrService_informAlive_pargs {
 public:


  virtual ~AlgMgrService_informAlive_pargs() throw();
  const std::string* algName;
  const AlgSvrInfo* svrInfo;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _AlgMgrService_getAlgSvrList_args__isset {
  _AlgMgrService_getAlgSvrList_args__isset() : name(false) {}
  bool name :1;
} _AlgMgrService_getAlgSvrList_args__isset;

class AlgMgrService_getAlgSvrList_args {
 public:

  AlgMgrService_getAlgSvrList_args(const AlgMgrService_getAlgSvrList_args&);
  AlgMgrService_getAlgSvrList_args(AlgMgrService_getAlgSvrList_args&&);
  AlgMgrService_getAlgSvrList_args& operator=(const AlgMgrService_getAlgSvrList_args&);
  AlgMgrService_getAlgSvrList_args& operator=(AlgMgrService_getAlgSvrList_args&&);
  AlgMgrService_getAlgSvrList_args() : name() {
  }

  virtual ~AlgMgrService_getAlgSvrList_args() throw();
  std::string name;

  _AlgMgrService_getAlgSvrList_args__isset __isset;

  void __set_name(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class AlgMgrService_getAlgSvrList_pargs {
 public:


  virtual ~AlgMgrService_getAlgSvrList_pargs() throw();
  const std::string* name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _AlgMgrService_getAlgSvrList_result__isset {
  _AlgMgrService_getAlgSvrList_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _AlgMgrService_getAlgSvrList_result__isset;

class AlgMgrService_getAlgSvrList_result {
 public:

  AlgMgrService_getAlgSvrList_result(const AlgMgrService_getAlgSvrList_result&);
  AlgMgrService_getAlgSvrList_result(AlgMgrService_getAlgSvrList_result&&);
  AlgMgrService_getAlgSvrList_result& operator=(const AlgMgrService_getAlgSvrList_result&);
  AlgMgrService_getAlgSvrList_result& operator=(AlgMgrService_getAlgSvrList_result&&);
  AlgMgrService_getAlgSvrList_result() {
  }

  virtual ~AlgMgrService_getAlgSvrList_result() throw();
  std::vector<AlgSvrInfo>  success;
  InvalidRequest err;

  _AlgMgrService_getAlgSvrList_result__isset __isset;

  void __set_success(const std::vector<AlgSvrInfo> & val);

  void __set_err(const InvalidRequest& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _AlgMgrService_getAlgSvrList_presult__isset {
  _AlgMgrService_getAlgSvrList_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _AlgMgrService_getAlgSvrList_presult__isset;

class AlgMgrService_getAlgSvrList_presult {
 public:


  virtual ~AlgMgrService_getAlgSvrList_presult() throw();
  std::vector<AlgSvrInfo> * success;
  InvalidRequest err;

  _AlgMgrService_getAlgSvrList_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class AlgMgrServiceClientT : virtual public AlgMgrServiceIf {
 public:
  AlgMgrServiceClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  AlgMgrServiceClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  int32_t addSvr(const std::string& algName, const AlgSvrInfo& svrInfo);
  void send_addSvr(const std::string& algName, const AlgSvrInfo& svrInfo);
  int32_t recv_addSvr();
  void rmSvr(const std::string& algName, const AlgSvrInfo& svrInfo);
  void send_rmSvr(const std::string& algName, const AlgSvrInfo& svrInfo);
  void recv_rmSvr();
  void informAlive(const std::string& algName, const AlgSvrInfo& svrInfo);
  void send_informAlive(const std::string& algName, const AlgSvrInfo& svrInfo);
  void getAlgSvrList(std::vector<AlgSvrInfo> & _return, const std::string& name);
  void send_getAlgSvrList(const std::string& name);
  void recv_getAlgSvrList(std::vector<AlgSvrInfo> & _return);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef AlgMgrServiceClientT< ::apache::thrift::protocol::TProtocol> AlgMgrServiceClient;

template <class Protocol_>
class AlgMgrServiceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  boost::shared_ptr<AlgMgrServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AlgMgrServiceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (AlgMgrServiceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_addSvr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSvr(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_rmSvr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmSvr(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_informAlive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_informAlive(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getAlgSvrList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAlgSvrList(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  AlgMgrServiceProcessorT(boost::shared_ptr<AlgMgrServiceIf> iface) :
    iface_(iface) {
    processMap_["addSvr"] = ProcessFunctions(
      &AlgMgrServiceProcessorT::process_addSvr,
      &AlgMgrServiceProcessorT::process_addSvr);
    processMap_["rmSvr"] = ProcessFunctions(
      &AlgMgrServiceProcessorT::process_rmSvr,
      &AlgMgrServiceProcessorT::process_rmSvr);
    processMap_["informAlive"] = ProcessFunctions(
      &AlgMgrServiceProcessorT::process_informAlive,
      &AlgMgrServiceProcessorT::process_informAlive);
    processMap_["getAlgSvrList"] = ProcessFunctions(
      &AlgMgrServiceProcessorT::process_getAlgSvrList,
      &AlgMgrServiceProcessorT::process_getAlgSvrList);
  }

  virtual ~AlgMgrServiceProcessorT() {}
};

typedef AlgMgrServiceProcessorT< ::apache::thrift::protocol::TDummyProtocol > AlgMgrServiceProcessor;

template <class Protocol_>
class AlgMgrServiceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  AlgMgrServiceProcessorFactoryT(const ::boost::shared_ptr< AlgMgrServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AlgMgrServiceIfFactory > handlerFactory_;
};

typedef AlgMgrServiceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > AlgMgrServiceProcessorFactory;

class AlgMgrServiceMultiface : virtual public AlgMgrServiceIf {
 public:
  AlgMgrServiceMultiface(std::vector<boost::shared_ptr<AlgMgrServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AlgMgrServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AlgMgrServiceIf> > ifaces_;
  AlgMgrServiceMultiface() {}
  void add(boost::shared_ptr<AlgMgrServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t addSvr(const std::string& algName, const AlgSvrInfo& svrInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSvr(algName, svrInfo);
    }
    return ifaces_[i]->addSvr(algName, svrInfo);
  }

  void rmSvr(const std::string& algName, const AlgSvrInfo& svrInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmSvr(algName, svrInfo);
    }
    ifaces_[i]->rmSvr(algName, svrInfo);
  }

  void informAlive(const std::string& algName, const AlgSvrInfo& svrInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->informAlive(algName, svrInfo);
    }
    ifaces_[i]->informAlive(algName, svrInfo);
  }

  void getAlgSvrList(std::vector<AlgSvrInfo> & _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAlgSvrList(_return, name);
    }
    ifaces_[i]->getAlgSvrList(_return, name);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class AlgMgrServiceConcurrentClientT : virtual public AlgMgrServiceIf {
 public:
  AlgMgrServiceConcurrentClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  AlgMgrServiceConcurrentClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  int32_t addSvr(const std::string& algName, const AlgSvrInfo& svrInfo);
  int32_t send_addSvr(const std::string& algName, const AlgSvrInfo& svrInfo);
  int32_t recv_addSvr(const int32_t seqid);
  void rmSvr(const std::string& algName, const AlgSvrInfo& svrInfo);
  int32_t send_rmSvr(const std::string& algName, const AlgSvrInfo& svrInfo);
  void recv_rmSvr(const int32_t seqid);
  void informAlive(const std::string& algName, const AlgSvrInfo& svrInfo);
  void send_informAlive(const std::string& algName, const AlgSvrInfo& svrInfo);
  void getAlgSvrList(std::vector<AlgSvrInfo> & _return, const std::string& name);
  int32_t send_getAlgSvrList(const std::string& name);
  void recv_getAlgSvrList(std::vector<AlgSvrInfo> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef AlgMgrServiceConcurrentClientT< ::apache::thrift::protocol::TProtocol> AlgMgrServiceConcurrentClient;

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#include "AlgMgrService.tcc"
#include "alg_mgr_types.tcc"

#endif
