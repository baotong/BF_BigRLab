// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AlgMgrService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::BigRLab;

class AlgMgrServiceHandler : virtual public AlgMgrServiceIf {
 public:
  AlgMgrServiceHandler() {
    // Your initialization goes here
  }

  int16_t availablePort() {
    // Your implementation goes here
    printf("availablePort\n");
  }

  int32_t addSvr(const std::string& algName, const AlgSvrInfo& svrInfo) {
    // Your implementation goes here
    printf("addSvr\n");
  }

  void rmSvr(const std::string& algName, const AlgSvrInfo& svrInfo) {
    // Your implementation goes here
    printf("rmSvr\n");
  }

  void informAlive(const std::string& algName, const AlgSvrInfo& svrInfo) {
    // Your implementation goes here
    printf("informAlive\n");
  }

  void getAlgSvrList(std::vector<AlgSvrInfo> & _return, const std::string& name) {
    // Your implementation goes here
    printf("getAlgSvrList\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<AlgMgrServiceHandler> handler(new AlgMgrServiceHandler());
  shared_ptr<TProcessor> processor(new AlgMgrServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

